# Sets the name of the workflow, which is displayed in the GitHub Actions UI.
name: Build VCV Rack Plugin

# Specifies the trigger for this workflow.
on:
  # Triggers the workflow on push events for main and dev branches.
  push:
    branches: [ main, dev ]
    # Also triggers on creation of tags matching 'v*' for stable releases,
    # allowing for arbitrary postfix strings (e.g., v2.0.1-beta, v2.0.1-rc1).
    tags:
      - 'v*'
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# Defines environment variables that are available to all jobs and steps
# in this workflow.
env:
  rack-sdk-version: 2.6.3
  rack-plugin-toolchain-dir: /home/build/rack-plugin-toolchain
  rack-plugin-name: DanTSynth

# Sets default settings for all 'run' steps within the workflow.
defaults:
  run:
    # Specifies that all 'run' steps should use the Bash shell.
    # Bash is required for commands such as pushd.
    shell: bash

# This section defines all the jobs that the workflow will execute.
# Jobs run in parallel by default unless dependencies are specified.
jobs:
  # Check if the 'version' property in plugin.json has changed.
  check-version-change:
    # This job runs on any push event. Its logic will determine if a relevant version change occurred.
    if: github.event_name == 'push'
    name: Check Plugin Version Change
    runs-on: ubuntu-24.04
    outputs:
      # Output variable indicating if the version has changed.
      version_changed: ${{ steps.version_check.outputs.version_changed }}
    steps:
      # Checkout the repository code, fetching enough history to compare current and previous commits.
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Fetch depth of 2 to get current and previous commit for comparison.
          fetch-depth: 2
      # Configure Git to trust the repository directory for operations.
      - name: Configure Git safe directory
        run: git config --global --add safe.directory /__w/DanT.Synth/DanT.Synth
      # Step to compare plugin.json versions and set an output.
      - name: Compare plugin.json versions
        id: version_check # ID for this step to reference its outputs.
        run: |
          PREVIOUS_VERSION=""
          CURRENT_VERSION=""
          # Get the version from plugin.json in the current commit (HEAD).
          CURRENT_VERSION=$(jq -r .version plugin.json)
          # Get the version from plugin.json in the previous commit (HEAD~1).
          PREVIOUS_VERSION=$(git show HEAD~1:plugin.json | jq -r .version)
          # Compare the versions.
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Plugin version has changed from $PREVIOUS_VERSION to $CURRENT_VERSION."
            # Set the output variable to true if versions are different.
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Plugin version has NOT changed. Current: $CURRENT_VERSION, Previous: $PREVIOUS_VERSION."
            # Set the output variable to false otherwise.
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

  # This job handles the Windows and Linux stable builds.
  build-lin-win:
    # This job runs only if the 'check-version-change' job indicates a version change,
    # or if a tag is pushed.
    # The 'needs' dependency ensures 'check-version-change' completes, and its output is used.
    if: (github.ref == 'refs/heads/main' && needs.check-version-change.outputs.version_changed == 'true') || startsWith(github.ref, 'refs/tags/')
    # This job depends on the check-version-change job to get its output.
    needs: check-version-change
    # The name of the job as it appears in the UI. It's dynamically set
    # from the 'platform' value in the build matrix (e.g., "win-x64").
    name: Build ${{ matrix.platform }}
    # Specifies the type of machine to run the job on. Here, it's an
    # Ubuntu 24.04 runner.
    runs-on: ubuntu-24.04
    # This job will run inside a Docker container, ensuring a consistent
    # and isolated build environment.
    container:
      # The Docker image to use for the job. This image contains the necessary
      # toolchain for building VCV Rack plugins for Windows and Linux.
      image: ghcr.io/bloodbat/rack-plugin-toolchain-win-linux:rack-sdk-2.6.3
      # Runs commands inside the container as the 'root' user.
      options: --user root
    # Defines a build matrix. This allows you to run the same job multiple
    # times with different configurations.
    strategy:
      matrix:
        platform: [lin-x64, win-x64]
    # Contains the sequence of tasks that will be executed in this job.
    steps:
      # This step uses a pre-made action to check out the repository code
      # onto the runner. The version is pinned for better security.
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: recursive
      # Set PLUGIN_DIR and RACK_DIR environment variables for subsequent steps.
      - name: Set Build Environment variables
        run: |
          echo "PLUGIN_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          # Set RACK_DIR to the toolchain directory, as the SDK is part of the container.
          echo "RACK_DIR=${{ env.rack-plugin-toolchain-dir }}" >> $GITHUB_ENV
      # - name: Run tests
      #   run: |
      #     # Run tests from the main repository directory where tests.mk is located.
      #     make test
      - name: Build plugin
        run: |
          # Change directory to the toolchain directory to run the plugin build.
          pushd ${{ env.rack-plugin-toolchain-dir }}
          # Run the make command to build the plugin for the specific platform
          # from the matrix.
          make plugin-build-${{ matrix.platform }}
          popd # Return to the original directory
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          overwrite: true
          path: ${{ env.rack-plugin-toolchain-dir }}/plugin-build
          name: ${{ env.rack-plugin-name }}-${{ matrix.platform }}

  # This is the job for building on macOS.
  build-mac:
    # This job runs only if the 'check-version-change' job indicates a version change,
    # or if a tag is pushed.
    # The 'needs' dependency ensures 'check-version-change' completes, and its output is used.
    if: (github.ref == 'refs/heads/main' && needs.check-version-change.outputs.version_changed == 'true') || startsWith(github.ref, 'refs/tags/')
    # This job depends on the check-version-change job to get its output.
    needs: check-version-change
    # The name of the job as it appears in the UI.
    name: mac
    runs-on: macos-14
    strategy:
      # If one of the matrix jobs fails, the other jobs will continue to run.
      fail-fast: false
      matrix:
        platform: [arm64, x64]
    steps:
      # Checks out the repository code, including submodules.
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: recursive
      # A custom step to download and prepare the VCV Rack SDK.
      - name: Get Rack-SDK
        run: |
          pushd $HOME
          wget -O Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-${{ env.rack-sdk-version }}-mac-${{ matrix.platform }}.zip
          unzip Rack-SDK.zip
      # Setup common macOS build environment variables and ARCH_TYPE.
      - name: Setup macOS Build Environment
        run: |
          ARCH_TYPE=""
          if [ "${{ matrix.platform }}" == "x64" ]; then
            ARCH_TYPE="x86_64"
          elif [ "${{ matrix.platform }}" == "arm64" ]; then
            ARCH_TYPE="arm64"
          fi
          echo "ARCH=$ARCH_TYPE" >> $GITHUB_ENV
          echo "RACK_DIR=$HOME/Rack-SDK" >> $GITHUB_ENV
          echo "CROSS_COMPILE_TARGET_x64=x86_64-apple-darwin" >> $GITHUB_ENV
          echo "CROSS_COMPILE_TARGET_arm64=arm64-apple-darwin" >> $GITHUB_ENV
          echo "CROSS_COMPILE=$CROSS_COMPILE_TARGET_${{ matrix.platform }}" >> $GITHUB_ENV
      # - name: Run tests
      #   run: |
      #     make test ARCH=$ARCH
      - name: Build plugin
        run: |
          make dep ARCH=$ARCH
          make dist ARCH=$ARCH
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          overwrite: true
          path: dist/*.vcvplugin
          name: ${{ env.rack-plugin-name }}-mac-${{ matrix.platform }}

  # This job handles the Windows and Linux NIGHTLY builds from the 'dev' branch.
  build-nightly-lin-win:
    # This job only runs for pushes or manual dispatches on the 'dev' branch.
    if: github.ref == 'refs/heads/dev'
    name: Build Nightly ${{ matrix.platform }}
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/bloodbat/rack-plugin-toolchain-win-linux:rack-sdk-2.6.3
      options: --user root
    strategy:
      matrix:
        platform: [lin-x64, win-x64]
    steps:
      # Checkout the repository code.
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: recursive
      # Configure Git to trust the repository directory for operations within the container.
      - name: Configure Git safe directory
        run: git config --global --add safe.directory /__w/DanT.Synth/DanT.Synth
      # This step appends the commit hash to the version in plugin.json.
      - name: Update version for nightly build
        run: |
          current_version=$(jq -r .version plugin.json)
          short_sha=$(git rev-parse --short HEAD)
          new_version="${current_version}-${short_sha}"
          jq ".version = \"$new_version\"" plugin.json > tmp.json && mv tmp.json plugin.json
          echo "Updated plugin.json version to: $(jq -r .version plugin.json)"
      # Set PLUGIN_DIR and RACK_DIR environment variables for subsequent steps.
      - name: Set Build Environment variables
        run: |
          echo "PLUGIN_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          # Set RACK_DIR to the toolchain directory, as the SDK is part of the container.
          echo "RACK_DIR=${{ env.rack-plugin-toolchain-dir }}" >> $GITHUB_ENV
      # - name: Run tests
      #   run: |
      #     # Run tests from the main repository directory where tests.mk is located.
      #     make test
      - name: Build plugin
        run: |
          # Change directory to the toolchain directory to run the plugin build.
          pushd ${{ env.rack-plugin-toolchain-dir }}
          # Run the make command to build the plugin for the specific platform
          # from the matrix.
          make plugin-build-${{ matrix.platform }}
          popd # Return to the original directory
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          overwrite: true
          path: ${{ env.rack-plugin-toolchain-dir }}/plugin-build
          # The artifact name is suffixed with '-nightly'.
          name: ${{ env.rack-plugin-name }}-${{ matrix.platform }}-nightly

  # This job handles the macOS NIGHTLY builds from the 'dev' branch.
  build-nightly-mac:
    if: github.ref == 'refs/heads/dev'
    name: Build Nightly mac
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        platform: [arm64, x64]
    steps:
      # Checkout the repository code.
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: recursive
      # Configure Git to trust the repository directory for operations within the runner.
      - name: Configure Git safe directory
        run: git config --global --add safe.directory /__w/DanT.Synth/DanT.Synth
      - name: Update version for nightly build
        run: |
          current_version=$(jq -r .version plugin.json)
          short_sha=$(git rev-parse --short HEAD)
          new_version="${current_version}-${short_sha}"
          jq ".version = \"$new_version\"" plugin.json > tmp.json && mv tmp.json plugin.json
          echo "Updated plugin.json version to: $(jq -r .version plugin.json)"
      # A custom step to download and prepare the VCV Rack SDK.
      - name: Get Rack-SDK
        run: |
          pushd $HOME
          wget -O Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-${{ env.rack-sdk-version }}-mac-${{ matrix.platform }}.zip
          unzip Rack-SDK.zip
      # Setup common macOS Build Environment variables and ARCH_TYPE.
      - name: Setup macOS Build Environment
        run: |
          ARCH_TYPE=""
          if [ "${{ matrix.platform }}" == "x64" ]; then
            ARCH_TYPE="x86_64"
          elif [ "${{ matrix.platform }}" == "arm64" ]; then
            ARCH_TYPE="arm64"
          fi
          echo "ARCH=$ARCH_TYPE" >> $GITHUB_ENV
          echo "RACK_DIR=$HOME/Rack-SDK" >> $GITHUB_ENV
          echo "CROSS_COMPILE_TARGET_x64=x86_64-apple-darwin" >> $GITHUB_ENV
          echo "CROSS_COMPILE_TARGET_arm64=arm64-apple-darwin" >> $GITHUB_ENV
          echo "CROSS_COMPILE=$CROSS_COMPILE_TARGET_${{ matrix.platform }}" >> $GITHUB_ENV
      # - name: Run tests
      #   run: |
      #     make test ARCH=$ARCH
      - name: Build plugin
        run: |
          make dep ARCH=$ARCH
          make dist ARCH=$ARCH
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          overwrite: true
          path: dist/*.vcvplugin
          name: ${{ env.rack-plugin-name }}-mac-${{ matrix.platform }}-nightly

  # Job to publish stable releases to GitHub.
  release-stable:
    # This job depends on the stable build jobs.
    needs:
      - build-lin-win
      - build-mac
    runs-on: ubuntu-24.04
    steps:
      # Checkout the repository code to access Git history for release notes.
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      # Configure Git to trust the repository directory for operations.
      - name: Configure Git safe directory
        run: git config --global --add safe.directory /__w/DanT.Synth/DanT.Synth
      # Download all stable build artifacts.
      - name: Download stable build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: _artifacts
      - name: Delete old release assets
        uses: andreaswilli/delete-release-assets-action@cee1e4ece007d910b3555134b0c8109687469ec3 # v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: Nightly
          deleteOnlyFromDrafts: false
      # Generate release notes for stable releases.
      - name: Generate Stable Release Notes
        id: stable_release_notes
        run: |
          CURRENT_TAG=${{ github.ref_name }}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${CURRENT_TAG}^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found. Listing all commits up to ${CURRENT_TAG}."
            RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" ${CURRENT_TAG})
          else
            echo "Generating notes from ${PREVIOUS_TAG} to ${CURRENT_TAG}."
            RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" ${PREVIOUS_TAG}..${CURRENT_TAG})
          fi
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes in ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      # Create and upload the stable release.
      - name: Create Stable GitHub Release
        uses: svenstaro/upload-release-action@81c65b7cd4de9b2570615ce3aad67a41de5b1a13 # v2.11.2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: Nightly
          file_glob: true
          file: _artifacts/**/*.vcvplugin
          overwrite: true
          release_name: "Release ${{ github.ref_name }}"
          prerelease: false
          make_latest: true
          body: ${{ steps.stable_release_notes.outputs.release_body }}

  # Job to publish nightly releases to GitHub.
  release-nightly:
    # This job depends on the nightly build jobs.
    needs:
      - build-nightly-lin-win
      - build-nightly-mac
    runs-on: ubuntu-24.04
    steps:
      # Checkout the repository code to access Git history for release notes.
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      # Configure Git to trust the repository directory for operations.
      - name: Configure Git safe directory
        run: git config --global --add safe.directory /__w/DanT.Synth/DanT.Synth
      # Download all nightly build artifacts.
      - name: Download nightly build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: _artifacts
      - name: Delete old release assets
        uses: andreaswilli/delete-release-assets-action@cee1e4ece007d910b3555134b0c8109687469ec3 # v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: Nightly
          deleteOnlyFromDrafts: false
      # Generate release notes for nightly builds.
      - name: Generate Nightly Release Notes
        id: nightly_release_notes
        run: |
          CURRENT_NIGHTLY_TAG="nightly-${{ github.sha }}"
          PREVIOUS_NIGHTLY_TAG=$(git tag -l "nightly-*" | sort -rV | head -n 2 | tail -n 1)
          if [ -z "$PREVIOUS_NIGHTLY_TAG" ]; then
            echo "No previous nightly tag found. Listing last 20 commits on 'dev' branch."
            RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" -n 20)
          else
            echo "Generating nightly notes from ${PREVIOUS_NIGHTLY_TAG} to ${CURRENT_NIGHTLY_TAG}."
            RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" ${PREVIOUS_NIGHTLY_TAG}..HEAD)
          fi
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "## Nightly Build - ${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "This is a nightly build from the 'dev' branch." >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Recent Commits:" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      # Create and upload the nightly release.
      - name: Create Nightly GitHub Release
        uses: svenstaro/upload-release-action@81c65b7cd4de9b2570615ce3aad67a41de5b1a13 # v2.11.2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: Nightly
          file_glob: true
          file: _artifacts/**/*.vcvplugin
          overwrite: true
          release_name: "Nightly Build - ${{ github.sha }}"
          prerelease: true
          body: ${{ steps.nightly_release_notes.outputs.release_body }}
